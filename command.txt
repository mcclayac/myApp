




# Docker Build and tag
docker build --tag=friendlyhello .

# nstall requirements
pip install -r requirements.txt

# Docker Tag Image
docker build --tag=friendlyhello .

# Run friendly app
docker run -p 4000:80 friendlyhello

# RUn the the background
docker run -d -p 4000:80 friendlyhello

# tag image mcclayac/get-started:part2
$ docker tag friendlyhello mcclayac/get-started:part2

# run the tagged image
$ docker run -p 4000:80 -d mcclayac/get-started:part2

# Push the image
$ docker push mcclayac/get-started:part2

# Curl Verification
$ curl localhost:4000/
$ curl -4 localhost:4000
<h3>Hello World!</h3><b>Hostname:</b> a7c49997b715<br/><b>Visits:</b> <i>cannot connect to Redis, counter disabled</i>(myApp) Anthonys-MacBook-Pro:myApp mcclayac


# Init the swam
$ docker swarm init
Swarm initialized: current node (afs7vej7u7uxzeq89bkxil2j2) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-1ecl04f44uif2esdemy9vgc7yrjjk17vzefc5hrd2zerhpwvbi-19p3hvi4757510smjg6fq3cdv 192.168.65.3:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


# Deploy to Swamdocker-machine ls
$
$ docker service ps getstartedpythonlab_web

# Take down the app
docker stack rm getstartedpythonlab

# List Services
$ docker service ls
ID                  NAME                      MODE                REPLICAS            IMAGE                              PORTS
ouz5f9528z27        getstartedgolanglab_web   replicated          5/5                 localhost:5000/cloudnative:part2   *:4040->8080/tcp
tyskdrcdnbf4        getstartedpythonlab_web   replicated          5/5                 mcclayac/get-started:part2         *:4000->80/tcp

$ docker service ps getstarted
ID                  NAME                      MODE                REPLICAS            IMAGE                        PORTS
tyskdrcdnbf4        getstartedpythonlab_web   replicated          5/5                 mcclayac/get-started:part2   *:4000->80/tcp

#  List the running servers of the service
$ docker service ps getstartedpythonlab_web
$ docker service ps getstartedpythonlab_web
ID                  NAME                        IMAGE                        NODE                    DESIRED STATE       CURRENT STATE            ERROR               PORTS
flsibeuudjyk        getstartedpythonlab_web.1   mcclayac/get-started:part2   linuxkit-025000000001   Running             Running 31 minutes ago
5mooylqzsb9v        getstartedpythonlab_web.2   mcclayac/get-started:part2   linuxkit-025000000001   Running             Running 31 minutes ago
plb0twqwkrvd        getstartedpythonlab_web.3   mcclayac/get-started:part2   linuxkit-025000000001   Running             Running 31 minutes ago
kphdj68q42qi        getstartedpythonlab_web.4   mcclayac/get-started:part2   linuxkit-025000000001   Running             Running 31 minutes ago
js168go7y1vx        getstartedpythonlab_web.5   mcclayac/get-started:part2   linuxkit-025000000001   Running             Running 31 minutes ago

# Curl Multiple Times
#!/bin/bash
COUNTER=0
while [  $COUNTER -lt 30 ]; do
 echo The counter is $COUNTER
 curl -4  http://localhost:4000
 let COUNTER=COUNTER+1
done


10.0.0.129
COUNTER=0
while [  $COUNTER -lt 10 ]; do
 echo The counter is $COUNTER
 curl -4  http://10.0.0.129:4000
 let COUNTER=COUNTER+1
done



# Take Down the Swam
docker swarm leave --force


# Setup Swam
docker swarm init

 docker swarm init
Swarm initialized: current node (l7drx0914hgxoamxdxpxuoomg) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-1ce15c2k6ytekw5y5elp98c9rsn70kc6c6pxdb9wvscuuviiia-c20m41i87byvpimgv61nu9iod 192.168.65.3:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

10.0.0.129

docker swarm join --token SWMTKN-1-2z26uftqx5ru32764m7pd6itl4t0a0s9kfeijgb4nl8m4mtc7d-2obngusa2u8pb3ri4lrjaz3mw 192.168.65.3:2377





---------------------------------------------------------------------------------

Some commands to explore at this stage:

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry


Some commands to explore at this stage:

docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager



